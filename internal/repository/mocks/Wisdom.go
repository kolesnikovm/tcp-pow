// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kolesnikovm/tcp-pow/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockWisdom is an autogenerated mock type for the Wisdom type
type MockWisdom struct {
	mock.Mock
}

type MockWisdom_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWisdom) EXPECT() *MockWisdom_Expecter {
	return &MockWisdom_Expecter{mock: &_m.Mock}
}

// GetQuote provides a mock function with given fields: _a0
func (_m *MockWisdom) GetQuote(_a0 context.Context) (domain.Quote, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetQuote")
	}

	var r0 domain.Quote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.Quote, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.Quote); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Quote)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWisdom_GetQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuote'
type MockWisdom_GetQuote_Call struct {
	*mock.Call
}

// GetQuote is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWisdom_Expecter) GetQuote(_a0 interface{}) *MockWisdom_GetQuote_Call {
	return &MockWisdom_GetQuote_Call{Call: _e.mock.On("GetQuote", _a0)}
}

func (_c *MockWisdom_GetQuote_Call) Run(run func(_a0 context.Context)) *MockWisdom_GetQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWisdom_GetQuote_Call) Return(_a0 domain.Quote, _a1 error) *MockWisdom_GetQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWisdom_GetQuote_Call) RunAndReturn(run func(context.Context) (domain.Quote, error)) *MockWisdom_GetQuote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWisdom creates a new instance of MockWisdom. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWisdom(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWisdom {
	mock := &MockWisdom{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
